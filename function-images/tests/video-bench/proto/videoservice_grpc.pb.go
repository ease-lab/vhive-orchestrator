// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DecodeVideoClient is the client API for DecodeVideo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecodeVideoClient interface {
	SendVideo(ctx context.Context, in *SendVideoRequest, opts ...grpc.CallOption) (*SendVideoReply, error)
}

type decodeVideoClient struct {
	cc grpc.ClientConnInterface
}

func NewDecodeVideoClient(cc grpc.ClientConnInterface) DecodeVideoClient {
	return &decodeVideoClient{cc}
}

func (c *decodeVideoClient) SendVideo(ctx context.Context, in *SendVideoRequest, opts ...grpc.CallOption) (*SendVideoReply, error) {
	out := new(SendVideoReply)
	err := c.cc.Invoke(ctx, "/videoservice.DecodeVideo/SendVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecodeVideoServer is the server API for DecodeVideo service.
// All implementations must embed UnimplementedDecodeVideoServer
// for forward compatibility
type DecodeVideoServer interface {
	SendVideo(context.Context, *SendVideoRequest) (*SendVideoReply, error)
	mustEmbedUnimplementedDecodeVideoServer()
}

// UnimplementedDecodeVideoServer must be embedded to have forward compatible implementations.
type UnimplementedDecodeVideoServer struct {
}

func (UnimplementedDecodeVideoServer) SendVideo(context.Context, *SendVideoRequest) (*SendVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVideo not implemented")
}
func (UnimplementedDecodeVideoServer) mustEmbedUnimplementedDecodeVideoServer() {}

// UnsafeDecodeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecodeVideoServer will
// result in compilation errors.
type UnsafeDecodeVideoServer interface {
	mustEmbedUnimplementedDecodeVideoServer()
}

func RegisterDecodeVideoServer(s grpc.ServiceRegistrar, srv DecodeVideoServer) {
	s.RegisterService(&DecodeVideo_ServiceDesc, srv)
}

func _DecodeVideo_SendVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecodeVideoServer).SendVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoservice.DecodeVideo/SendVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecodeVideoServer).SendVideo(ctx, req.(*SendVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DecodeVideo_ServiceDesc is the grpc.ServiceDesc for DecodeVideo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecodeVideo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoservice.DecodeVideo",
	HandlerType: (*DecodeVideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVideo",
			Handler:    _DecodeVideo_SendVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/videoservice.proto",
}

// ProcessFrameClient is the client API for ProcessFrame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessFrameClient interface {
	SendFrame(ctx context.Context, opts ...grpc.CallOption) (ProcessFrame_SendFrameClient, error)
}

type processFrameClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessFrameClient(cc grpc.ClientConnInterface) ProcessFrameClient {
	return &processFrameClient{cc}
}

func (c *processFrameClient) SendFrame(ctx context.Context, opts ...grpc.CallOption) (ProcessFrame_SendFrameClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessFrame_ServiceDesc.Streams[0], "/videoservice.ProcessFrame/SendFrame", opts...)
	if err != nil {
		return nil, err
	}
	x := &processFrameSendFrameClient{stream}
	return x, nil
}

type ProcessFrame_SendFrameClient interface {
	Send(*SendFrameRequest) error
	CloseAndRecv() (*SendFrameReply, error)
	grpc.ClientStream
}

type processFrameSendFrameClient struct {
	grpc.ClientStream
}

func (x *processFrameSendFrameClient) Send(m *SendFrameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processFrameSendFrameClient) CloseAndRecv() (*SendFrameReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendFrameReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessFrameServer is the server API for ProcessFrame service.
// All implementations must embed UnimplementedProcessFrameServer
// for forward compatibility
type ProcessFrameServer interface {
	SendFrame(ProcessFrame_SendFrameServer) error
	mustEmbedUnimplementedProcessFrameServer()
}

// UnimplementedProcessFrameServer must be embedded to have forward compatible implementations.
type UnimplementedProcessFrameServer struct {
}

func (UnimplementedProcessFrameServer) SendFrame(ProcessFrame_SendFrameServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFrame not implemented")
}
func (UnimplementedProcessFrameServer) mustEmbedUnimplementedProcessFrameServer() {}

// UnsafeProcessFrameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessFrameServer will
// result in compilation errors.
type UnsafeProcessFrameServer interface {
	mustEmbedUnimplementedProcessFrameServer()
}

func RegisterProcessFrameServer(s grpc.ServiceRegistrar, srv ProcessFrameServer) {
	s.RegisterService(&ProcessFrame_ServiceDesc, srv)
}

func _ProcessFrame_SendFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessFrameServer).SendFrame(&processFrameSendFrameServer{stream})
}

type ProcessFrame_SendFrameServer interface {
	SendAndClose(*SendFrameReply) error
	Recv() (*SendFrameRequest, error)
	grpc.ServerStream
}

type processFrameSendFrameServer struct {
	grpc.ServerStream
}

func (x *processFrameSendFrameServer) SendAndClose(m *SendFrameReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processFrameSendFrameServer) Recv() (*SendFrameRequest, error) {
	m := new(SendFrameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessFrame_ServiceDesc is the grpc.ServiceDesc for ProcessFrame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessFrame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoservice.ProcessFrame",
	HandlerType: (*ProcessFrameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFrame",
			Handler:       _ProcessFrame_SendFrame_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/videoservice.proto",
}
